{"version":3,"sources":["views/DayView.js","views/CalendarView.js","components/FormFields.js","views/AddTask.js","views/ViewSelector.js","views/TaskView.js","views/TasksView.js","views/ConnectionsView.js","views/AppView.js","views/GetResetTokenView.js","views/ResetPasswordView.js","views/ForgotView.js","views/LoginView.js","views/SignUpView.js","views/AuthView.js","App.js","reportWebVitals.js","index.js"],"names":["DayCell","day","className","Calendar","date","year","getFullYear","month","getMonth","daysInMonth","Date","firstDay","getDay","lastDay","topArray","middleArray","bottomArray","push","fillDays","map","index","DayView","FormFields","label","name","type","children","list","htmlFor","undefined","as","placeholder","component","CREATE_TASK","gql","initialValues","description","urgent","assignees","email","AddTask","refetchTasks","user","useMutation","onCompleted","createTask","data","listid","validationSchema","Yup","required","onSubmit","values","setSubmitting","setTimeout","variables","toISOString","filter","assignee","remove","length","onClick","addTask","message","id","connections","connection","value","ViewSelector","setDate","useState","getDate","setValue","event","slice","preventDefault","onChange","target","DELETE_TASK","EDIT_TASK","TaskView","task","editing","setEditing","deleteTask","icon","faEdit","faTrash","Number","toDateString","manager","TasksView","tasks","loading","CONNECT","ConnectionsView","refetchUser","addConnection","connectsToUser","GET_TASKS","AppView","useQuery","refetch","document","cookie","testMonth","getAssignedTasks","CREATE_RESET_TOKEN","GetResetTokenView","createResetToken","success","to","RESET_PASSWORD","ResetPasswordView","resetPassword","password","token","matches","ForgotView","exact","path","LOGIN","LoginView","setMessage","login","forgot","setForgot","SIGN_UP","SignUpView","createAccount","signUp","AuthView","GET_USER","App","getUser","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","client","ApolloClient","uri","cache","InMemoryCache","typePolicies","Query","fields","merge","ReactDOM","render","StrictMode","ApolloProvider","getElementById"],"mappings":"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","file":"static/js/main.a83474fb.chunk.js","sourcesContent":["const DayCell = ({ day }) => {\n  return (\n    <div className=\"border border-collapse border-solid border-gray-900 h-36\">\n      <div>{day}</div>\n    </div>\n  );\n};\n\nexport default DayCell;\n\n","import DayView from \"./DayView\";\n\nconst Calendar = ({ date }) => {\n  const year = date.getFullYear();\n  const month = date.getMonth();\n  const daysInMonth = [\n    31,\n    new Date(year, 1, 29).getMonth() === 1 ? 29 : 28,\n    31,\n    30,\n    31,\n    30,\n    31,\n    31,\n    30,\n    31,\n    30,\n    31,\n  ];\n  const firstDay = new Date(year, month, 1).getDay();\n  const lastDay = new Date(year, month, daysInMonth[month]).getDay();\n  const fillDays = (month) => {\n    let topArray = [];\n    let middleArray = [];\n    let bottomArray = [];\n    for (\n      let day = daysInMonth[month - 1] - firstDay +2;\n      day < daysInMonth[month - 1] +1;\n      day++\n    ) {\n      topArray.push(day);\n    }\n    for (let day = 1; day < daysInMonth[month] + 1; day++) {\n      middleArray.push(day);\n    }\n    for (let day = 1; day < 7 - lastDay + 1; day++) {\n      bottomArray.push(day);\n    }\n    let dayArray = [...topArray, ...middleArray, ...bottomArray];\n    return dayArray;\n  };\n\n  return (\n    <div className=\"grid grid-cols-7 grid-rows-5\">\n      {fillDays(month).map((day, index) => {\n        return <DayView key={index} day={day} />;\n      })}\n    </div>\n  );\n};\n\nexport default Calendar;\n\n/*\ndate.months[month].weeks.map((week) => {\n        return (\n          <tr key={week}>\n            {date.months[month].days\n              .slice(week * 7, week * 7 + 7)\n              .map((day) => {\n                return (\n                  <td key={day}>\n                    <DayCell day={day} />\n                  </td>\n                );\n              })}\n*/\n/* const fillMonthWeeks = (days) => {\n  let weekArray = [];\n  for (let week = 0; week < Math.ceil(days / 7); week++) {\n    weekArray.push(week);\n  }\n  return weekArray;\n}; */\n","import { Field, ErrorMessage } from \"formik\";\n\nconst FormFields = ({ label, name, type, children, list }) => {\n  return (\n    <div className=\"mb-4 flex flex-col\">\n      <label htmlFor={name} className=\"font-bold text-indigo-600 mr-2\">\n        {label}\n      </label>\n      <Field\n        name={name}\n        type={type !== \"textarea\" && type !== \"select\" ? type : undefined}\n        as={(type === \"textarea\") | (type === \"select\") ? type : undefined}\n        className=\"rounded focus:outline-none focus:ring\"\n        children={type === \"select\" ? children : undefined}\n        list={list ? list : undefined}\n        placeholder=\"\"\n      />\n      <ErrorMessage\n        name={name}\n        component=\"div\"\n        className=\"text-red-600 text-sm\"\n      />\n    </div>\n  );\n};\n\nexport default FormFields;\n","import { Formik, Form, FieldArray } from \"formik\";\nimport FormFields from \"../components/FormFields\";\nimport * as Yup from \"yup\";\nimport { gql, useMutation } from \"@apollo/client\";\n\nconst CREATE_TASK = gql`\n  mutation CreateTask(\n    $name: String!\n    $description: String!\n    $date: String!\n    $urgent: Boolean!\n    $assignees: [UserInput]!\n  ) {\n    addTask(\n      name: $name\n      description: $description\n      date: $date\n      urgent: $urgent\n      assignees: $assignees\n    ) {\n      success\n      message\n    }\n  }\n`;\n\nconst initialValues = {\n  name: \"\",\n  description: \"\",\n  date: \"\",\n  urgent: false,\n  assignees: [{ email: \"\" }],\n};\nconst AddTask = ({ refetchTasks, user }) => {\n  const [createTask, { data }] = useMutation(CREATE_TASK, {\n    onCompleted: () => refetchTasks(),\n  });\n  const listid = \"assignees\";\n  return (\n    <div className=\"bg-origin-padding w-min rounded-lg bg-gray-300 bg-opacity-90 shadow-2xl mt-10 ml-10 p-4\">\n      <Formik\n        initialValues={initialValues}\n        validationSchema={Yup.object({\n          name: Yup.string().required(\"Required\"),\n          description: Yup.string().required(\"Required\"),\n          date: Yup.date(),\n          urgent: Yup.bool(),\n        })}\n        onSubmit={(values, { setSubmitting }) => {\n          setTimeout(() => {\n            createTask({\n              variables: {\n                name: values.name,\n                description: values.description,\n                date: new Date(values.date).toISOString(),\n                urgent: values.urgent,\n                assignees: values.assignees.filter((assignee) => assignee.email !== \"\"),\n              },\n            });\n            setSubmitting(false);\n          }, 400);\n        }}\n        className=\"flex items-center justify-center\"\n      >\n        {({ values }) => (\n          <Form>\n            <FormFields label=\"Title\" name=\"name\" type=\"text\" />\n            <FormFields\n              label=\"Description\"\n              name=\"description\"\n              type=\"textarea\"\n            />\n            <FormFields label=\"Date\" name=\"date\" type=\"datetime-local\" />\n            <FormFields label=\"Urgent\" name=\"urgent\" type=\"checkbox\" />\n            <FieldArray name=\"assignees\">\n              {({ remove, push }) => (\n                <div className=\"flex items-center flex-col\">\n                  {values.assignees.length > 0 &&\n                    values.assignees.map((assignee, index) => (\n                      <div key={index} className=\"flex items-center\">\n                        <FormFields\n                          name={`assignees.${index}.email`}\n                          list={listid}\n                          label=\"Assignee\"\n                        />\n                        <button\n                          onClick={() => remove(index)}\n                          className=\"mt-2 ml-1 rounded-lg w-6 bg-red-200 hover:bg-red-500\"\n                        >\n                          X\n                        </button>\n                      </div>\n                    ))}\n                  <button\n                    type=\"button\"\n                    onClick={() => push({ email: \"\" })}\n                    className=\"rounded bg-yellow-200 hover:bg-yellow-500 mb-3 -mt-3\"\n                  >\n                    New Assignee\n                  </button>\n                </div>\n              )}\n            </FieldArray>\n\n            <button\n              type=\"submit\"\n              className=\"rounded w-full bg-green-200 hover:bg-green-500\"\n            >\n              Create\n            </button>\n          </Form>\n        )}\n      </Formik>\n      {data ? data.addTask.message : null}\n      <datalist id={listid}>\n        {user.connections.map((connection) => {\n          return (\n            <option value={connection.email} key={connection.email}>\n              {connection.name}\n            </option>\n          );\n        })}\n      </datalist>\n    </div>\n  );\n};\n\nexport default AddTask;\n","import { useState } from \"react\";\n\nconst ViewSelector = ({ date, setDate }) => {\n  const [value, setValue] = useState(\n    `${date.getFullYear()}-${\n      date.getMonth() < 9 ? \"0\" + (date.getMonth() + 1) : date.getMonth + 1\n    }-${date.getDate() < 9 ? \"0\" + (date.getDate() + 1) : date.getDate() + 1}`\n  );\n  const handleChange = (event) => {\n    setValue(event.target.value);\n  };\n  const handleSubmit = (event) => {\n    setDate(\n      new Date(value.slice(0, 4), value.slice(5, 7) - 1, value.slice(8, 10))\n    );\n    event.preventDefault();\n  };\n\n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        <input type=\"date\" name=\"date\" value={value} onChange={handleChange} />\n        <button type=\"submit\">GO</button>\n      </form>\n    </div>\n  );\n};\n\nexport default ViewSelector;\n","import { gql, useMutation } from \"@apollo/client\";\nimport { Formik, Form } from \"formik\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faEdit, faTrash } from \"@fortawesome/free-solid-svg-icons\";\nimport { useState } from \"react\";\n\nconst DELETE_TASK = gql`\n  mutation DeleteTask($id: Int!) {\n    deleteTask(id: $id) {\n      message\n      success\n    }\n  }\n`;\n\nconst EDIT_TASK = gql`\n  mutation EditTask(\n    $id: Int!\n    $assignees: [UserInput]\n    $completed: Boolean\n    $date: String\n    $description: String\n    $name: String\n    $urgent: Boolean\n  ) {\n    editTask(\n      id: $id\n      assignees: $assignees\n      completed: $completed\n      date: $date\n      description: $description\n      name: $name\n      urgent: $urgent\n    ) {\n      message\n      success\n    }\n  }\n`;\nconst TaskView = ({ task, refetchTasks }) => {\n  const [editing, setEditing] = useState(false);\n  const [deleteTask] = useMutation(DELETE_TASK, {\n    onCompleted: () => refetchTasks(),\n  });\n\n  const [editTask] = useMutation(EDIT_TASK, {\n    onCompleted: () => refetchTasks(),\n  });\n  return (\n    <div\n      className={`rounded-lg shadow-2xl flex flex-col ${\n        task.urgent ? \"bg-red-400\" : \"bg-blue-400\"\n      }`}\n    >\n      <div className=\"flex flex-row\">\n        <div className=\"font-bold text-xl ml-auto\">{task.name}</div>\n\n        <div className=\"ml-auto mr-2 mt-1\">\n          <div className=\"group relative inline-block mt-1 mr-2\">\n            <button onClick={() => setEditing(true)}>\n              <FontAwesomeIcon icon={faEdit} />\n            </button>\n            <span className=\"group-hover:inline-block absolute bg-gray-600 rounded shadow-lg z-50 left-1/2 top-full -ml-4 text-center text-white hidden\">\n              Edit\n            </span>\n          </div>\n          <div className=\"group relative inline-block\">\n            <button\n              onClick={() => deleteTask({ variables: { id: task.id } })}\n              className=\"hover:bg-red-600 bg-green-600 rounded-full w-6 \"\n            >\n              <FontAwesomeIcon icon={faTrash} />\n            </button>\n            <span className=\"group-hover:inline-block absolute bg-gray-600 rounded shadow-lg z-50 left-1/2 top-full -ml-8 text-center text-white hidden\">\n              Delete\n            </span>\n          </div>\n        </div>\n      </div>\n      {editing ? (\n        <div></div>\n      ) : (\n        <div>\n          <div className=\"font-bold\">Description</div>\n          <div className=\"bg-yellow-300 rounded\">{task.description}</div>\n          <div>{new Date(Number(task.date)).toDateString()}</div>\n          <div className=\"font-bold\">\n            Manager:{\"  \"}\n            <div className=\"bg-green-800 rounded-md inline-block text-white ml-1\">\n              {task.manager.name}\n            </div>\n          </div>\n          <div className=\"font-bold\">\n            Assigned to:{\"  \"}\n            {task.assignees.map((assignee) => (\n              <div\n                key={assignee.name}\n                className=\"bg-purple-600 rounded-md inline-block text-white ml-1\"\n              >\n                {assignee.name}\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default TaskView;\n","import TaskView from \"./TaskView\"\n\nconst TasksView = ({tasks, loading, refetchTasks}) => {\n    return (\n        <div>\n            {loading | tasks === null ? \"Getting tasks...\" : tasks.map((task) => {\n                return <TaskView refetchTasks={refetchTasks} key={task.id} task={task} />\n            })}\n        </div>\n    )\n}\n\nexport default TasksView\n","import { Form, Formik } from \"formik\";\nimport FormFields from \"../components/FormFields\";\nimport * as Yup from 'yup'\nimport { gql, useMutation } from \"@apollo/client\";\n\nconst CONNECT = gql`\n    mutation AddConnection($email: String!) {\n        addConnection(email: $email) {\n            message\n            success\n        }\n    }\n`\n\nexport const ConnectionsView = ({refetchUser, user}) => {\n  const [addConnection, {data}] = useMutation(CONNECT, {onCompleted: () => refetchUser()})\n  return (\n    <div className=\"bg-origin-padding rounded-lg bg-gray-300 bg-opacity-90 shadow-2xl mt-10 ml-10 p-4\" >\n      <Formik\n        initialValues={{ email: \"\" }}\n        validationSchema={Yup.object({\n          email: Yup.string()\n            .email(\"Invalid email address\")\n            .required(\"Required\")\n        })}\n        onSubmit={(values, { setSubmitting }) => {\n          setTimeout(() => {\n              addConnection({variables: {email: values.email}})\n            setSubmitting(false);\n          }, 400);\n        }}\n        className=\"flex items-center justify-center\"\n      >\n        <Form>\n          <FormFields label=\"User's Email\" name=\"email\" type=\"email\" />\n          <button type=\"submit\" className=\"rounded w-full bg-green-200 hover:bg-green-500\">Connect</button>\n          <div className=\"text-red-600 text-sm mt-2\">{data ? data.addConnection.message : undefined}</div>\n        </Form>\n      </Formik>\n      <div className=\"font-bold\">Connections</div>\n      {user.connections.map((connection) => {\n          return <div key={connection.name} className=\"text-yellow-700\">{connection.name}: {connection.email}</div>\n      } )}\n      <div className=\"font-bold\">Connects To You</div>\n      {user.connectsToUser.map((connection) => {\n          return <div key={connection.name} className=\"text-yellow-700\">{connection.name}: {connection.email}</div>\n      } )}\n\n    </div>\n  );\n};\n","import { useState } from \"react\";\nimport Calendar from \"./CalendarView\";\nimport AddTask from \"./AddTask\";\nimport ViewSelector from \"./ViewSelector\";\nimport { gql, useQuery } from \"@apollo/client\";\nimport TasksView from \"./TasksView\";\nimport { ConnectionsView } from \"./ConnectionsView\";\n\nconst GET_TASKS = gql`\n  query GetTasks {\n    getAssignedTasks {\n      id\n      name\n      description\n      date\n      assignees {\n        name\n      }\n      completed\n      urgent\n      manager {\n        name\n      }\n    }\n  }\n`;\n\nconst AppView = ({ refetchUser, user }) => {\n  const [date, setDate] = useState(new Date());\n\n  const logOut = () => {\n    document.cookie = \"token=; expires=0\";\n    refetchUser();\n  };\n  const { loading, data, refetch } = useQuery(GET_TASKS);\n  return (\n    <div className=\"bg-gray-100\">\n      <button onClick={logOut}>Log Out</button>\n      <ViewSelector date={date} setDate={setDate} />\n      <Calendar testMonth=\"september\" date={date} />\n      <TasksView\n        refetchTasks={refetch}\n        tasks={data ? data.getAssignedTasks : undefined}\n        loading={loading ? loading : undefined}\n      />\n      <div className=\"flex\" >\n      <AddTask refetchTasks={refetch} user={user} />\n      <ConnectionsView refetchUser={refetchUser} user={user} />\n      </div>\n    </div>\n  );\n};\n\nexport default AppView;\n","import { Formik, Form } from \"formik\";\nimport * as Yup from \"yup\";\nimport FormFields from \"../components/FormFields\";\nimport { useMutation, gql } from \"@apollo/client\";\nimport { Redirect } from \"react-router-dom\";\n\nconst CREATE_RESET_TOKEN = gql`\n  mutation CreateResetToken($email: String!) {\n    createResetToken(email: $email) {\n      message\n      success\n    }\n  }\n`;\n\nconst GetResetTokenView = () => {\n  const [createResetToken, { data, loading }] = useMutation(CREATE_RESET_TOKEN);\n\n  if (loading) {\n    return <div>Sending reset code...</div>;\n  } else if (data === undefined) {\n  } else if (data.createResetToken.success) {\n    return <Redirect to=\"/auth/forgot/reset\" />;\n  }\n  return (\n    <div className=\"bg-origin-padding w-min rounded-lg bg-gray-300 bg-opacity-90 shadow-2xl mt-10 ml-10 p-4\">\n      <Formik\n        initialValues={{ email: \"\" }}\n        validationSchema={Yup.object({\n          email: Yup.string()\n            .email(\"Invalid email address\")\n            .required(\"Required\"),\n        })}\n        onSubmit={(values, { setSubmitting }) => {\n          setTimeout(() => {\n            createResetToken({\n              variables: { email: values.email },\n            });\n\n            setSubmitting(false);\n          }, 400);\n        }}\n        className=\"flex items-center justify-center\"\n      >\n        <Form>\n          <FormFields label=\"Email\" name=\"email\" type=\"text\" />\n          <div className=\"h-4\" />\n          <button\n            type=\"submit\"\n            className=\"bg-blue-600 rounded-full w-full text-white\"\n          >\n            Forgot\n          </button>\n        </Form>\n      </Formik>\n      {data && !data.createResetToken.success ? (\n        <div>{data.createResetToken.message}</div>\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default GetResetTokenView;\n","import { Formik, Form } from \"formik\";\nimport * as Yup from \"yup\";\nimport FormFields from \"../components/FormFields\";\nimport { useMutation, gql } from \"@apollo/client\";\nimport { Link } from \"react-router-dom\";\n\nconst RESET_PASSWORD = gql`\n  mutation ResetPassword($email: String!, $password: String!, $token: String!) {\n    resetPassword(email: $email, password: $password, token: $token) {\n      message\n      success\n    }\n  }\n`;\n\nconst ResetPasswordView = () => {\n  const [resetPassword, { data, loading }] = useMutation(RESET_PASSWORD);\n  if (loading) {\n    return <div>Checking</div>;\n  } else if (data === undefined) {\n  } else if (data.resetPassword.success) {\n    return (\n      <div className=\"flex items-center justify-center flex-col bg-origin-padding w-min rounded-lg bg-gray-300 bg-opacity-90 shadow-2xl mt-10 ml-10 p-4\">\n        <div className=\"text-center\">Reset Successful</div>\n        <Link to=\"/auth\" className=\"bg-blue-600 rounded-full w-full text-white mt-5 text-center\">Sign In</Link>\n      </div>\n    );\n  }\n  return (\n    <div className=\"bg-origin-padding w-min rounded-lg bg-gray-300 bg-opacity-90 shadow-2xl mt-10 ml-10 p-4\">\n      <Formik\n        initialValues={{ email: \"\", password: \"\", token: \"\" }}\n        validationSchema={Yup.object({\n          email: Yup.string()\n            .email(\"Invalid email address\")\n            .required(\"Required\"),\n          password: Yup.string().required(\"Required\"),\n          token: Yup.string()\n            .matches(/^\\d+$/, \"Reset code is only numbers\")\n            .length(6, \"Reset code is six digits\")\n            .required(\"Required\"),\n        })}\n        onSubmit={(values, { setSubmitting }) => {\n          setTimeout(() => {\n            resetPassword({\n              variables: {\n                email: values.email,\n                password: values.password,\n                token: values.token,\n              },\n            });\n\n            setSubmitting(false);\n          }, 400);\n        }}\n        className=\"flex items-center justify-center\"\n      >\n        <Form>\n          <FormFields label=\"Email\" name=\"email\" type=\"text\" />\n          <FormFields label=\"Password\" name=\"password\" type=\"password\" />\n          <FormFields label=\"Reset Code\" name=\"token\" type=\"text\" />\n          <div className=\"h-4\" />\n          <button\n            type=\"submit\"\n            className=\"bg-blue-600 rounded-full w-full text-white\"\n          >\n            Reset\n          </button>\n        </Form>\n      </Formik>\n      {data && !data.resetPassword.success ? (\n        <div>{data.resetPassword.message}</div>\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default ResetPasswordView;\n","import { Route } from \"react-router-dom\";\nimport GetResetTokenView from \"./GetResetTokenView\";\nimport ResetPasswordView from \"./ResetPasswordView\";\n\nconst ForgotView = () => {\n  return (\n    <div>\n      <Route exact path=\"/auth/forgot\">\n        <GetResetTokenView />\n      </Route>\n      <Route path=\"/auth/forgot/reset\">\n        <ResetPasswordView />\n      </Route>\n    </div>\n  );\n};\n\nexport default ForgotView;\n","import { useMutation, gql } from \"@apollo/client\";\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\nimport { useState } from \"react\";\nimport { Redirect } from \"react-router-dom\";\n\nconst LOGIN = gql`\n  mutation Login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      message\n    }\n  }\n`;\n\nconst LoginView = ({refetchUser}) => {\n  const [login] = useMutation(LOGIN, {\n    onCompleted: (data) => {\n      setMessage(data.login.message);\n      refetchUser()\n    },\n  });\n  const [message, setMessage] = useState(\"\");\n  \n  const [forgot, setForgot] = useState(false)\n\n  return (\n    <div className=\"bg-origin-padding w-min rounded-lg bg-gray-300 bg-opacity-90 shadow-2xl mt-10 ml-10 p-4\">\n      {forgot ? <Redirect to=\"/auth/forgot\"/> : undefined}\n      <Formik\n        initialValues={{ email: \"\", password: \"\" }}\n        validationSchema={Yup.object({\n          email: Yup.string()\n            .email(\"Invalid email address\")\n            .required(\"Required\"),\n          password: Yup.string().required(\"Required\"),\n        })}\n        onSubmit={(values, { setSubmitting }) => {\n          setTimeout(() => {\n            login({\n              variables: { email: values.email, password: values.password },\n            });\n            setSubmitting(false);\n          }, 400);\n        }}\n        className=\"flex items-center justify-center\"\n      >\n        <Form>\n          <label htmlFor=\"email\" className=\"font-bold\">\n            Email\n          </label>\n          <Field name=\"email\" type=\"email\" className=\"rounded-lg \" />\n          <ErrorMessage\n            name=\"email\"\n            component=\"div\"\n            className=\"text-red-600 text-sm\"\n          />\n          <div className=\"h-4\" />\n          <label htmlFor=\"password\" className=\"font-bold\">\n            Password\n          </label>\n          <Field name=\"password\" type=\"password\" className=\"rounded-lg \" />\n          <ErrorMessage\n            name=\"password\"\n            component=\"div\"\n            className=\"text-red-600 text-sm\"\n          />\n          <div className=\"h-4\" />\n          <button\n            type=\"submit\"\n            className=\"bg-blue-600 rounded-full w-full text-white\"\n          >\n            Login\n          </button>\n        </Form>\n      </Formik>\n      <div className=\"text-red-600 text-sm mt-2\">{message}</div>\n      <button onClick={() => setForgot(true)} className=\"bg-blue-600 rounded-full w-full text-white mt-5\">Forgot Password</button>\n    </div>\n  );\n};\n\nexport default LoginView;\n","import { useMutation, gql } from \"@apollo/client\";\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\nimport { useState } from \"react\";\nconst SIGN_UP = gql`\n  mutation SignUp($email: String!, $password: String!, $name: String!) {\n    createAccount(email: $email, password: $password, name: $name) {\n      message\n    }\n  }\n`;\n\nconst SignUpView = ({ refetchUser }) => {\n  const [signUp] = useMutation(SIGN_UP, {\n    onCompleted: (data) => {\n      setMessage(data.createAccount.message);\n      refetchUser();\n    },\n  });\n  const [message, setMessage] = useState(\"\");\n  return (\n    <div className=\"bg-origin-padding w-min rounded-lg bg-gray-300 bg-opacity-90 shadow-2xl mt-10 ml-10 p-4\">\n      <Formik\n        initialValues={{ name: \"\", email: \"\", password: \"\" }}\n        validationSchema={Yup.object({\n          name: Yup.string().required(\"Required\"),\n          email: Yup.string()\n            .email(\"Invalid email address\")\n            .required(\"Required\"),\n          password: Yup.string().required(\"Required\"),\n        })}\n        onSubmit={(values, { setSubmitting }) => {\n          setTimeout(() => {\n            signUp({\n              variables: {\n                name: values.name,\n                email: values.email,\n                password: values.password,\n              },\n            });\n            setSubmitting(false);\n          }, 400);\n        }}\n        className=\"flex items-center justify-center\"\n      >\n        <Form>\n          <label htmlFor=\"name\" className=\"font-bold\">\n            Name\n          </label>\n          <Field name=\"name\" type=\"name\" className=\"rounded-lg \" />\n          <ErrorMessage\n            name=\"name\"\n            component=\"div\"\n            className=\"text-red-600 text-sm\"\n          />\n          <div className=\"h-4\" />\n          <label htmlFor=\"email\" className=\"font-bold\">\n            Email\n          </label>\n          <Field name=\"email\" type=\"email\" className=\"rounded-lg \" />\n          <ErrorMessage\n            name=\"email\"\n            component=\"div\"\n            className=\"text-red-600 text-sm\"\n          />\n          <div className=\"h-4\" />\n          <label htmlFor=\"password\" className=\"font-bold\">\n            Password\n          </label>\n          <Field name=\"password\" type=\"password\" className=\"rounded-lg \" />\n          <ErrorMessage\n            name=\"password\"\n            component=\"div\"\n            className=\"text-red-600 text-sm\"\n          />\n          <div className=\"h-4\" />\n          <button\n            type=\"submit\"\n            className=\"bg-blue-600 rounded-full w-full text-white\"\n          >\n            Sign Up\n          </button>\n        </Form>\n      </Formik>\n      <div className=\"text-red-600 text-sm mt-2\">{message}</div>\n    </div>\n  );\n};\n\nexport default SignUpView;\n","import { Route } from \"react-router-dom\";\nimport ForgotView from \"./ForgotView\";\nimport LoginView from \"./LoginView\";\nimport SignUpView from \"./SignUpView\";\n\nconst AuthView = ({ refetchUser }) => {\n  return (\n    <div>\n      <Route exact path=\"/auth\">\n        <div className=\"flex flex-wrap justify-center items-center h-screen\">\n          <LoginView refetchUser={refetchUser} />\n          <SignUpView refetchUser={refetchUser} />\n        </div>\n      </Route>\n      <Route path=\"/auth/forgot\">\n          <ForgotView/>\n      </Route>\n    </div>\n  );\n};\n\nexport default AuthView;\n","import { gql, useQuery } from \"@apollo/client\";\nimport { BrowserRouter as Router, Redirect, Route } from \"react-router-dom\";\nimport AppView from \"./views/AppView\";\nimport AuthView from \"./views/AuthView\";\n\nconst GET_USER = gql`\n  query GetUser {\n    getUser {\n      id\n      name\n      email\n      connections {\n        name\n        email\n      }\n      connectsToUser {\n        name\n        email\n      }\n    }\n  }\n`;\n\nfunction App() {\n  const { loading, data, refetch} = useQuery(GET_USER);\n  if (loading) return \"Logging in...\";\n  return (\n    <Router>\n      <Route path=\"/\" exact>\n        {data.getUser ? <AppView refetchUser={refetch} user={data.getUser} /> : <Redirect to=\"/auth\" />}\n      </Route>\n      <Route path=\"/auth\">\n        {data.getUser ? <Redirect to=\"/\" /> : <AuthView refetchUser={refetch} />}\n      </Route>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { ApolloClient, InMemoryCache, ApolloProvider } from \"@apollo/client\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nconst client = new ApolloClient({\n  uri: \"/graphql\",\n  cache: new InMemoryCache({\n    typePolicies: {\n      Query: {\n        fields: {\n          getAssignedTasks: {\n            merge: false,\n          },\n        },\n      },\n    },\n  }),\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <div>\n        <App />\n      </div>\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}