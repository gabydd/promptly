{"ast":null,"code":"import _slicedToArray from\"/home/gaby/Projects/promptly/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _taggedTemplateLiteral from\"/home/gaby/Projects/promptly/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";var _templateObject;import{Formik,Form,FieldArray}from\"formik\";import FormFields from\"../components/FormFields\";import*as Yup from\"yup\";import{gql,useMutation}from\"@apollo/client\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var CREATE_TASK=gql(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  mutation CreateTask(\\n    $name: String!\\n    $description: String!\\n    $date: String!\\n    $urgent: Boolean!\\n    $assignees: [UserInput]!\\n  ) {\\n    addTask(\\n      name: $name\\n      description: $description\\n      date: $date\\n      urgent: $urgent\\n      assignees: $assignees\\n    ) {\\n      success\\n      message\\n    }\\n  }\\n\"])));var initialValues={name:\"\",description:\"\",date:\"\",urgent:false,assignees:[{email:\"\"}]};var AddTask=function AddTask(_ref){var refetchTasks=_ref.refetchTasks,user=_ref.user;var _useMutation=useMutation(CREATE_TASK,{onCompleted:function onCompleted(){return refetchTasks();}}),_useMutation2=_slicedToArray(_useMutation,2),createTask=_useMutation2[0],data=_useMutation2[1].data;var listid=\"assignees\";return/*#__PURE__*/_jsxs(\"div\",{className:\"bg-origin-padding w-min rounded-lg bg-gray-300 bg-opacity-90 shadow-2xl mt-10 ml-10 p-4\",children:[/*#__PURE__*/_jsx(Formik,{initialValues:initialValues,validationSchema:Yup.object({name:Yup.string().required(\"Required\"),description:Yup.string().required(\"Required\"),date:Yup.date(),urgent:Yup.bool()}),onSubmit:function onSubmit(values,_ref2){var setSubmitting=_ref2.setSubmitting;setTimeout(function(){createTask({variables:{name:values.name,description:values.description,date:new Date(values.date).toISOString(),urgent:values.urgent,assignees:values.assignees.filter(function(assignee){return assignee.email!==\"\";})}});setSubmitting(false);},400);},className:\"flex items-center justify-center\",children:function children(_ref3){var values=_ref3.values;return/*#__PURE__*/_jsxs(Form,{children:[/*#__PURE__*/_jsx(FormFields,{label:\"Title\",name:\"name\",type:\"text\"}),/*#__PURE__*/_jsx(FormFields,{label:\"Description\",name:\"description\",type:\"textarea\"}),/*#__PURE__*/_jsx(FormFields,{label:\"Date\",name:\"date\",type:\"datetime-local\"}),/*#__PURE__*/_jsx(FormFields,{label:\"Urgent\",name:\"urgent\",type:\"checkbox\"}),/*#__PURE__*/_jsx(FieldArray,{name:\"assignees\",children:function children(_ref4){var remove=_ref4.remove,push=_ref4.push;return/*#__PURE__*/_jsxs(\"div\",{className:\"flex items-center flex-col\",children:[values.assignees.length>0&&values.assignees.map(function(assignee,index){return/*#__PURE__*/_jsxs(\"div\",{className:\"flex items-center\",children:[/*#__PURE__*/_jsx(FormFields,{name:\"assignees.\".concat(index,\".email\"),list:listid,label:\"Assignee\"}),/*#__PURE__*/_jsx(\"button\",{onClick:function onClick(){return remove(index);},className:\"mt-2 ml-1 rounded-lg w-6 bg-red-200 hover:bg-red-500\",children:\"X\"})]},index);}),/*#__PURE__*/_jsx(\"button\",{type:\"button\",onClick:function onClick(){return push({email:\"\"});},className:\"rounded bg-yellow-200 hover:bg-yellow-500 mb-3 -mt-3\",children:\"New Assignee\"})]});}}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",className:\"rounded w-full bg-green-200 hover:bg-green-500\",children:\"Create\"})]});}}),data?data.addTask.message:null,/*#__PURE__*/_jsx(\"datalist\",{id:listid,children:user.connections.map(function(connection){return/*#__PURE__*/_jsx(\"option\",{value:connection.email,children:connection.name},connection.email);})})]});};export default AddTask;","map":{"version":3,"sources":["/home/gaby/Projects/promptly/client/src/views/AddTask.js"],"names":["Formik","Form","FieldArray","FormFields","Yup","gql","useMutation","CREATE_TASK","initialValues","name","description","date","urgent","assignees","email","AddTask","refetchTasks","user","onCompleted","createTask","data","listid","object","string","required","bool","values","setSubmitting","setTimeout","variables","Date","toISOString","filter","assignee","remove","push","length","map","index","addTask","message","connections","connection"],"mappings":"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","sourcesContent":["import { Formik, Form, FieldArray } from \"formik\";\nimport FormFields from \"../components/FormFields\";\nimport * as Yup from \"yup\";\nimport { gql, useMutation } from \"@apollo/client\";\n\nconst CREATE_TASK = gql`\n  mutation CreateTask(\n    $name: String!\n    $description: String!\n    $date: String!\n    $urgent: Boolean!\n    $assignees: [UserInput]!\n  ) {\n    addTask(\n      name: $name\n      description: $description\n      date: $date\n      urgent: $urgent\n      assignees: $assignees\n    ) {\n      success\n      message\n    }\n  }\n`;\n\nconst initialValues = {\n  name: \"\",\n  description: \"\",\n  date: \"\",\n  urgent: false,\n  assignees: [{ email: \"\" }],\n};\nconst AddTask = ({ refetchTasks, user }) => {\n  const [createTask, { data }] = useMutation(CREATE_TASK, {\n    onCompleted: () => refetchTasks(),\n  });\n  const listid = \"assignees\";\n  return (\n    <div className=\"bg-origin-padding w-min rounded-lg bg-gray-300 bg-opacity-90 shadow-2xl mt-10 ml-10 p-4\">\n      <Formik\n        initialValues={initialValues}\n        validationSchema={Yup.object({\n          name: Yup.string().required(\"Required\"),\n          description: Yup.string().required(\"Required\"),\n          date: Yup.date(),\n          urgent: Yup.bool(),\n        })}\n        onSubmit={(values, { setSubmitting }) => {\n          setTimeout(() => {\n            createTask({\n              variables: {\n                name: values.name,\n                description: values.description,\n                date: new Date(values.date).toISOString(),\n                urgent: values.urgent,\n                assignees: values.assignees.filter((assignee) => assignee.email !== \"\"),\n              },\n            });\n            setSubmitting(false);\n          }, 400);\n        }}\n        className=\"flex items-center justify-center\"\n      >\n        {({ values }) => (\n          <Form>\n            <FormFields label=\"Title\" name=\"name\" type=\"text\" />\n            <FormFields\n              label=\"Description\"\n              name=\"description\"\n              type=\"textarea\"\n            />\n            <FormFields label=\"Date\" name=\"date\" type=\"datetime-local\" />\n            <FormFields label=\"Urgent\" name=\"urgent\" type=\"checkbox\" />\n            <FieldArray name=\"assignees\">\n              {({ remove, push }) => (\n                <div className=\"flex items-center flex-col\">\n                  {values.assignees.length > 0 &&\n                    values.assignees.map((assignee, index) => (\n                      <div key={index} className=\"flex items-center\">\n                        <FormFields\n                          name={`assignees.${index}.email`}\n                          list={listid}\n                          label=\"Assignee\"\n                        />\n                        <button\n                          onClick={() => remove(index)}\n                          className=\"mt-2 ml-1 rounded-lg w-6 bg-red-200 hover:bg-red-500\"\n                        >\n                          X\n                        </button>\n                      </div>\n                    ))}\n                  <button\n                    type=\"button\"\n                    onClick={() => push({ email: \"\" })}\n                    className=\"rounded bg-yellow-200 hover:bg-yellow-500 mb-3 -mt-3\"\n                  >\n                    New Assignee\n                  </button>\n                </div>\n              )}\n            </FieldArray>\n\n            <button\n              type=\"submit\"\n              className=\"rounded w-full bg-green-200 hover:bg-green-500\"\n            >\n              Create\n            </button>\n          </Form>\n        )}\n      </Formik>\n      {data ? data.addTask.message : null}\n      <datalist id={listid}>\n        {user.connections.map((connection) => {\n          return (\n            <option value={connection.email} key={connection.email}>\n              {connection.name}\n            </option>\n          );\n        })}\n      </datalist>\n    </div>\n  );\n};\n\nexport default AddTask;\n"]},"metadata":{},"sourceType":"module"}