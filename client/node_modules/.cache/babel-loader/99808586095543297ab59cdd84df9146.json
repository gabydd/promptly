{"ast":null,"code":"var _jsxFileName = \"/home/gaby/Projects/promptly/client/src/views/AddTask.js\",\n    _s = $RefreshSig$();\n\nimport { Formik, Form, FieldArray } from \"formik\";\nimport FormFields from \"../components/FormFields\";\nimport * as Yup from \"yup\";\nimport { gql, useMutation } from \"@apollo/client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CREATE_TASK = gql`\n  mutation CreateTask(\n    $name: String!\n    $description: String!\n    $date: String!\n    $urgent: Boolean!\n    $assignees: [UserInput]!\n  ) {\n    addTask(\n      name: $name\n      description: $description\n      date: $date\n      urgent: $urgent\n      assignees: $assignees\n    ) {\n      success\n      message\n    }\n  }\n`;\nconst initialValues = {\n  name: \"\",\n  description: \"\",\n  date: \"\",\n  urgent: false,\n  assignees: [{\n    email: \"\"\n  }]\n};\n\nconst AddTask = ({\n  refetchTasks,\n  user\n}) => {\n  _s();\n\n  const [createTask, {\n    data\n  }] = useMutation(CREATE_TASK, {\n    onCompleted: () => refetchTasks()\n  });\n  const listid = \"assignees\";\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-origin-padding w-min rounded-lg bg-gray-300 bg-opacity-90 shadow-2xl mt-10 ml-10 p-4\",\n    children: [/*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: initialValues,\n      validationSchema: Yup.object({\n        name: Yup.string().required(\"Required\"),\n        description: Yup.string().required(\"Required\"),\n        date: Yup.date(),\n        urgent: Yup.bool()\n      }),\n      onSubmit: (values, {\n        setSubmitting\n      }) => {\n        setTimeout(() => {\n          createTask({\n            variables: {\n              name: values.name,\n              description: values.description,\n              date: new Date(values.date).toISOString(),\n              urgent: values.urgent,\n              assignees: values.assignees.filter(assignee => assignee.email !== \"\")\n            }\n          });\n          setSubmitting(false);\n        }, 400);\n      },\n      className: \"flex items-center justify-center\",\n      children: ({\n        values\n      }) => /*#__PURE__*/_jsxDEV(Form, {\n        children: [/*#__PURE__*/_jsxDEV(FormFields, {\n          label: \"Title\",\n          name: \"name\",\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(FormFields, {\n          label: \"Description\",\n          name: \"description\",\n          type: \"textarea\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(FormFields, {\n          label: \"Date\",\n          name: \"date\",\n          type: \"datetime-local\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(FormFields, {\n          label: \"Urgent\",\n          name: \"urgent\",\n          type: \"checkbox\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(FieldArray, {\n          name: \"assignees\",\n          children: ({\n            remove,\n            push\n          }) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex items-center flex-col\",\n            children: [values.assignees.length > 0 && values.assignees.map((assignee, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"flex items-center\",\n              children: [/*#__PURE__*/_jsxDEV(FormFields, {\n                name: `assignees.${index}.email`,\n                list: listid,\n                label: \"Assignee\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 81,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => remove(index),\n                className: \"mt-2 ml-1 rounded-lg w-6 bg-red-200 hover:bg-red-500\",\n                children: \"X\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 86,\n                columnNumber: 25\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 23\n            }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              onClick: () => push({\n                email: \"\"\n              }),\n              className: \"rounded bg-yellow-200 hover:bg-yellow-500 mb-3 -mt-3\",\n              children: \"New Assignee\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"rounded w-full bg-green-200 hover:bg-green-500\",\n          children: \"Create\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), data ? data.addTask.message : null, /*#__PURE__*/_jsxDEV(\"datalist\", {\n      id: listid,\n      children: user.connections.map(connection => {\n        return /*#__PURE__*/_jsxDEV(\"option\", {\n          value: connection.email,\n          children: connection.name\n        }, connection.email, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AddTask, \"5GQzrZx/BrBEsbTd1xxu1OEt2+o=\", false, function () {\n  return [useMutation];\n});\n\n_c = AddTask;\nexport default AddTask;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddTask\");","map":{"version":3,"sources":["/home/gaby/Projects/promptly/client/src/views/AddTask.js"],"names":["Formik","Form","FieldArray","FormFields","Yup","gql","useMutation","CREATE_TASK","initialValues","name","description","date","urgent","assignees","email","AddTask","refetchTasks","user","createTask","data","onCompleted","listid","object","string","required","bool","values","setSubmitting","setTimeout","variables","Date","toISOString","filter","assignee","remove","push","length","map","index","addTask","message","connections","connection"],"mappings":"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","sourcesContent":["import { Formik, Form, FieldArray } from \"formik\";\nimport FormFields from \"../components/FormFields\";\nimport * as Yup from \"yup\";\nimport { gql, useMutation } from \"@apollo/client\";\n\nconst CREATE_TASK = gql`\n  mutation CreateTask(\n    $name: String!\n    $description: String!\n    $date: String!\n    $urgent: Boolean!\n    $assignees: [UserInput]!\n  ) {\n    addTask(\n      name: $name\n      description: $description\n      date: $date\n      urgent: $urgent\n      assignees: $assignees\n    ) {\n      success\n      message\n    }\n  }\n`;\n\nconst initialValues = {\n  name: \"\",\n  description: \"\",\n  date: \"\",\n  urgent: false,\n  assignees: [{ email: \"\" }],\n};\nconst AddTask = ({ refetchTasks, user }) => {\n  const [createTask, { data }] = useMutation(CREATE_TASK, {\n    onCompleted: () => refetchTasks(),\n  });\n  const listid = \"assignees\";\n  return (\n    <div className=\"bg-origin-padding w-min rounded-lg bg-gray-300 bg-opacity-90 shadow-2xl mt-10 ml-10 p-4\">\n      <Formik\n        initialValues={initialValues}\n        validationSchema={Yup.object({\n          name: Yup.string().required(\"Required\"),\n          description: Yup.string().required(\"Required\"),\n          date: Yup.date(),\n          urgent: Yup.bool(),\n        })}\n        onSubmit={(values, { setSubmitting }) => {\n          setTimeout(() => {\n            createTask({\n              variables: {\n                name: values.name,\n                description: values.description,\n                date: new Date(values.date).toISOString(),\n                urgent: values.urgent,\n                assignees: values.assignees.filter((assignee) => assignee.email !== \"\"),\n              },\n            });\n            setSubmitting(false);\n          }, 400);\n        }}\n        className=\"flex items-center justify-center\"\n      >\n        {({ values }) => (\n          <Form>\n            <FormFields label=\"Title\" name=\"name\" type=\"text\" />\n            <FormFields\n              label=\"Description\"\n              name=\"description\"\n              type=\"textarea\"\n            />\n            <FormFields label=\"Date\" name=\"date\" type=\"datetime-local\" />\n            <FormFields label=\"Urgent\" name=\"urgent\" type=\"checkbox\" />\n            <FieldArray name=\"assignees\">\n              {({ remove, push }) => (\n                <div className=\"flex items-center flex-col\">\n                  {values.assignees.length > 0 &&\n                    values.assignees.map((assignee, index) => (\n                      <div key={index} className=\"flex items-center\">\n                        <FormFields\n                          name={`assignees.${index}.email`}\n                          list={listid}\n                          label=\"Assignee\"\n                        />\n                        <button\n                          onClick={() => remove(index)}\n                          className=\"mt-2 ml-1 rounded-lg w-6 bg-red-200 hover:bg-red-500\"\n                        >\n                          X\n                        </button>\n                      </div>\n                    ))}\n                  <button\n                    type=\"button\"\n                    onClick={() => push({ email: \"\" })}\n                    className=\"rounded bg-yellow-200 hover:bg-yellow-500 mb-3 -mt-3\"\n                  >\n                    New Assignee\n                  </button>\n                </div>\n              )}\n            </FieldArray>\n\n            <button\n              type=\"submit\"\n              className=\"rounded w-full bg-green-200 hover:bg-green-500\"\n            >\n              Create\n            </button>\n          </Form>\n        )}\n      </Formik>\n      {data ? data.addTask.message : null}\n      <datalist id={listid}>\n        {user.connections.map((connection) => {\n          return (\n            <option value={connection.email} key={connection.email}>\n              {connection.name}\n            </option>\n          );\n        })}\n      </datalist>\n    </div>\n  );\n};\n\nexport default AddTask;\n"]},"metadata":{},"sourceType":"module"}