{"ast":null,"code":"var _jsxFileName = \"/home/gaby/Projects/tasks-app/client/src/views/ConnectionsView.js\",\n    _s = $RefreshSig$();\n\nimport { Form, Formik } from \"formik\";\nimport FormFields from \"../components/FormFields\";\nimport * as Yup from 'yup';\nimport { gql, useMutation } from \"@apollo/client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CONNECT = gql`\n    mutation AddConnection($email: String!) {\n        addConnection(email: $email) {\n            message\n            success\n        }\n    }\n`;\nexport const ConnectionsView = ({\n  refetchUser,\n  user\n}) => {\n  _s();\n\n  const [addConnection, {\n    data\n  }] = useMutation(CONNECT, {\n    onCompleted: () => refetchUser()\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-origin-padding w-min rounded-lg bg-gray-300 bg-opacity-90 shadow-2xl mt-10 ml-10 p-4\",\n    children: [/*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: {\n        email: \"\"\n      },\n      validationSchema: Yup.object({\n        email: Yup.string().email(\"Invalid email address\").required(\"Required\")\n      }),\n      onSubmit: (values, {\n        setSubmitting\n      }) => {\n        setTimeout(() => {\n          addConnection({\n            variables: {\n              email: values.email\n            }\n          });\n          setSubmitting(false);\n        }, 400);\n      },\n      className: \"flex items-center justify-center\",\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        children: [/*#__PURE__*/_jsxDEV(FormFields, {\n          label: \"User's Email\",\n          name: \"email\",\n          type: \"email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"rounded w-full bg-green-200 hover:bg-green-500\",\n          children: \"Connect\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-red-600 text-sm mt-2\",\n          children: data ? data.addConnection.message : undefined\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"font-bold\",\n      children: \"Connections\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), user.getUser.connections.map(connection => {\n      /*#__PURE__*/\n      _jsxDEV(\"div\", {\n        className: \"text-yellow-300\",\n        children: [connection.name, \": \", connection.email]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 11\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ConnectionsView, \"jJMdHhx565PmE72F3P4Xs4fal1A=\", false, function () {\n  return [useMutation];\n});\n\n_c = ConnectionsView;\n\nvar _c;\n\n$RefreshReg$(_c, \"ConnectionsView\");","map":{"version":3,"sources":["/home/gaby/Projects/tasks-app/client/src/views/ConnectionsView.js"],"names":["Form","Formik","FormFields","Yup","gql","useMutation","CONNECT","ConnectionsView","refetchUser","user","addConnection","data","onCompleted","email","object","string","required","values","setSubmitting","setTimeout","variables","message","undefined","getUser","connections","map","connection","name"],"mappings":";;;AAAA,SAASA,IAAT,EAAeC,MAAf,QAA6B,QAA7B;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,SAASC,GAAT,EAAcC,WAAd,QAAiC,gBAAjC;;AAEA,MAAMC,OAAO,GAAGF,GAAI;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,CAPA;AASA,OAAO,MAAMG,eAAe,GAAG,CAAC;AAACC,EAAAA,WAAD;AAAcC,EAAAA;AAAd,CAAD,KAAyB;AAAA;;AACtD,QAAM,CAACC,aAAD,EAAgB;AAACC,IAAAA;AAAD,GAAhB,IAA0BN,WAAW,CAACC,OAAD,EAAU;AAACM,IAAAA,WAAW,EAAE,MAAMJ,WAAW;AAA/B,GAAV,CAA3C;AACA,sBACE;AAAK,IAAA,SAAS,EAAC,yFAAf;AAAA,4BACE,QAAC,MAAD;AACE,MAAA,aAAa,EAAE;AAAEK,QAAAA,KAAK,EAAE;AAAT,OADjB;AAEE,MAAA,gBAAgB,EAAEV,GAAG,CAACW,MAAJ,CAAW;AAC3BD,QAAAA,KAAK,EAAEV,GAAG,CAACY,MAAJ,GACJF,KADI,CACE,uBADF,EAEJG,QAFI,CAEK,UAFL;AADoB,OAAX,CAFpB;AAOE,MAAA,QAAQ,EAAE,CAACC,MAAD,EAAS;AAAEC,QAAAA;AAAF,OAAT,KAA+B;AACvCC,QAAAA,UAAU,CAAC,MAAM;AACbT,UAAAA,aAAa,CAAC;AAACU,YAAAA,SAAS,EAAE;AAACP,cAAAA,KAAK,EAAEI,MAAM,CAACJ;AAAf;AAAZ,WAAD,CAAb;AACFK,UAAAA,aAAa,CAAC,KAAD,CAAb;AACD,SAHS,EAGP,GAHO,CAAV;AAID,OAZH;AAaE,MAAA,SAAS,EAAC,kCAbZ;AAAA,6BAeE,QAAC,IAAD;AAAA,gCACE,QAAC,UAAD;AAAY,UAAA,KAAK,EAAC,cAAlB;AAAiC,UAAA,IAAI,EAAC,OAAtC;AAA8C,UAAA,IAAI,EAAC;AAAnD;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAQ,UAAA,IAAI,EAAC,QAAb;AAAsB,UAAA,SAAS,EAAC,gDAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF,eAGE;AAAK,UAAA,SAAS,EAAC,2BAAf;AAAA,oBAA4CP,IAAI,GAAGA,IAAI,CAACD,aAAL,CAAmBW,OAAtB,GAAgCC;AAAhF;AAAA;AAAA;AAAA;AAAA,gBAHF;AAAA;AAAA;AAAA;AAAA;AAAA;AAfF;AAAA;AAAA;AAAA;AAAA,YADF,eAsBE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAtBF,EAuBGb,IAAI,CAACc,OAAL,CAAaC,WAAb,CAAyBC,GAAzB,CAA8BC,UAAD,IAAgB;AAC1C;AAAA;AAAK,QAAA,SAAS,EAAC,iBAAf;AAAA,mBAAkCA,UAAU,CAACC,IAA7C,QAAqDD,UAAU,CAACb,KAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AACH,KAFA,CAvBH;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA8BD,CAhCM;;GAAMN,e;UACqBF,W;;;KADrBE,e","sourcesContent":["import { Form, Formik } from \"formik\";\nimport FormFields from \"../components/FormFields\";\nimport * as Yup from 'yup'\nimport { gql, useMutation } from \"@apollo/client\";\n\nconst CONNECT = gql`\n    mutation AddConnection($email: String!) {\n        addConnection(email: $email) {\n            message\n            success\n        }\n    }\n`\n\nexport const ConnectionsView = ({refetchUser, user}) => {\n  const [addConnection, {data}] = useMutation(CONNECT, {onCompleted: () => refetchUser()})\n  return (\n    <div className=\"bg-origin-padding w-min rounded-lg bg-gray-300 bg-opacity-90 shadow-2xl mt-10 ml-10 p-4\" >\n      <Formik\n        initialValues={{ email: \"\" }}\n        validationSchema={Yup.object({\n          email: Yup.string()\n            .email(\"Invalid email address\")\n            .required(\"Required\")\n        })}\n        onSubmit={(values, { setSubmitting }) => {\n          setTimeout(() => {\n              addConnection({variables: {email: values.email}})\n            setSubmitting(false);\n          }, 400);\n        }}\n        className=\"flex items-center justify-center\"\n      >\n        <Form>\n          <FormFields label=\"User's Email\" name=\"email\" type=\"email\" />\n          <button type=\"submit\" className=\"rounded w-full bg-green-200 hover:bg-green-500\">Connect</button>\n          <div className=\"text-red-600 text-sm mt-2\">{data ? data.addConnection.message : undefined}</div>\n        </Form>\n      </Formik>\n      <div className=\"font-bold\">Connections</div>\n      {user.getUser.connections.map((connection) => {\n          <div className=\"text-yellow-300\">{connection.name}: {connection.email}</div>\n      } )}\n\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}