{"ast":null,"code":"var _jsxFileName = \"/home/gaby/Projects/tasks-app/client/src/views/AddTask.js\",\n    _s = $RefreshSig$();\n\nimport { Formik, Form } from \"formik\";\nimport FormFields from \"../components/FormFields\";\nimport * as Yup from \"yup\";\nimport { gql, useMutation } from \"@apollo/client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CREATE_TASK = gql`\n  mutation CreateTask(\n    $name: String!\n    $description: String!\n    $date: String!\n    $urgent: Boolean!\n  ) {\n    addTask(\n      name: $name\n      description: $description\n      date: $date\n      urgent: $urgent\n    ) {\n      success\n      message\n    }\n  }\n`;\n\nconst NewTask = ({\n  refetchTasks,\n  user\n}) => {\n  _s();\n\n  const [createTask, {\n    data\n  }] = useMutation(CREATE_TASK, {\n    onCompleted: () => refetchTasks()\n  });\n  console.log(user.connections.map(connection => {\n    return connection.email;\n  }));\n  const listid = \"assignees\";\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-origin-padding w-min rounded-lg bg-gray-300 bg-opacity-90 shadow-2xl mt-10 ml-10 p-4\",\n    children: [/*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: {\n        name: \"\",\n        description: \"\",\n        date: \"\",\n        urgent: false,\n        assignees: \"\"\n      },\n      validationSchema: Yup.object({\n        name: Yup.string().required(\"Required\"),\n        description: Yup.string().required(\"Required\"),\n        date: Yup.date(),\n        urgent: Yup.bool()\n      }),\n      onSubmit: (values, {\n        setSubmitting\n      }) => {\n        setTimeout(() => {\n          createTask({\n            variables: {\n              name: values.name,\n              description: values.description,\n              date: new Date(values.date).toISOString(),\n              urgent: values.urgent\n            }\n          });\n          setSubmitting(false);\n        }, 400);\n      },\n      className: \"flex items-center justify-center\",\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        children: [/*#__PURE__*/_jsxDEV(FormFields, {\n          label: \"Title\",\n          name: \"name\",\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FormFields, {\n          label: \"Description\",\n          name: \"description\",\n          type: \"textarea\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FormFields, {\n          label: \"Date\",\n          name: \"date\",\n          type: \"datetime-local\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FormFields, {\n          label: \"Urgent\",\n          name: \"urgent\",\n          type: \"checkbox\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FormFields, {\n          label: \"Assignee\",\n          list: listid,\n          name: \"assignees\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"rounded w-full bg-green-200 hover:bg-green-500\",\n          children: \"Create\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), data ? data.addTask.message : null, /*#__PURE__*/_jsxDEV(\"datalist\", {\n      id: listid,\n      children: user.connections.map(connection => {\n        return /*#__PURE__*/_jsxDEV(\"option\", {\n          value: connection.email,\n          children: connection.name\n        }, connection.email, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n\n_s(NewTask, \"5GQzrZx/BrBEsbTd1xxu1OEt2+o=\", false, function () {\n  return [useMutation];\n});\n\n_c = NewTask;\nexport default NewTask;\n\nvar _c;\n\n$RefreshReg$(_c, \"NewTask\");","map":{"version":3,"sources":["/home/gaby/Projects/tasks-app/client/src/views/AddTask.js"],"names":["Formik","Form","FormFields","Yup","gql","useMutation","CREATE_TASK","NewTask","refetchTasks","user","createTask","data","onCompleted","console","log","connections","map","connection","email","listid","name","description","date","urgent","assignees","object","string","required","bool","values","setSubmitting","setTimeout","variables","Date","toISOString","addTask","message"],"mappings":"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","sourcesContent":["import { Formik, Form } from \"formik\";\nimport FormFields from \"../components/FormFields\";\nimport * as Yup from \"yup\";\nimport { gql, useMutation } from \"@apollo/client\";\n\nconst CREATE_TASK = gql`\n  mutation CreateTask(\n    $name: String!\n    $description: String!\n    $date: String!\n    $urgent: Boolean!\n  ) {\n    addTask(\n      name: $name\n      description: $description\n      date: $date\n      urgent: $urgent\n    ) {\n      success\n      message\n    }\n  }\n`;\n\nconst NewTask = ({ refetchTasks, user }) => {\n  const [createTask, { data }] = useMutation(CREATE_TASK, {\n    onCompleted: () => refetchTasks(),\n  });\n  console.log(\n    user.connections.map((connection) => {\n      return connection.email;\n    })\n  );\n  const listid = \"assignees\";\n  return (\n    <div className=\"bg-origin-padding w-min rounded-lg bg-gray-300 bg-opacity-90 shadow-2xl mt-10 ml-10 p-4\">\n      <Formik\n        initialValues={{ name: \"\", description: \"\", date: \"\", urgent: false, assignees: \"\" }}\n        validationSchema={Yup.object({\n          name: Yup.string().required(\"Required\"),\n          description: Yup.string().required(\"Required\"),\n          date: Yup.date(),\n          urgent: Yup.bool(),\n        })}\n        onSubmit={(values, { setSubmitting }) => {\n          setTimeout(() => {\n            createTask({\n              variables: {\n                name: values.name,\n                description: values.description,\n                date: new Date(values.date).toISOString(),\n                urgent: values.urgent,\n              },\n            });\n            setSubmitting(false);\n          }, 400);\n        }}\n        className=\"flex items-center justify-center\"\n      >\n        <Form>\n          <FormFields label=\"Title\" name=\"name\" type=\"text\" />\n          <FormFields label=\"Description\" name=\"description\" type=\"textarea\" />\n          <FormFields label=\"Date\" name=\"date\" type=\"datetime-local\" />\n          <FormFields label=\"Urgent\" name=\"urgent\" type=\"checkbox\" />\n          <FormFields label=\"Assignee\" list={listid} name=\"assignees\" />\n          <button\n            type=\"submit\"\n            className=\"rounded w-full bg-green-200 hover:bg-green-500\"\n          >\n            Create\n          </button>\n        </Form>\n      </Formik>\n      {data ? data.addTask.message : null}\n      <datalist id={listid}>\n         {user.connections.map((connection) => {\n          return (\n            <option\n              value={connection.email}\n              key={connection.email}\n            >{connection.name}</option>\n          );\n        })}\n      </datalist>\n    </div>\n  );\n};\n\nexport default NewTask;\n"]},"metadata":{},"sourceType":"module"}