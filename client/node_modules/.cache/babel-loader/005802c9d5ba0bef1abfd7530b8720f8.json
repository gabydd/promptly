{"ast":null,"code":"var _jsxFileName = \"/home/gaby/Projects/tasks-app/client/src/views/AddTask.js\",\n    _s = $RefreshSig$();\n\nimport { Formik, Form, FieldArray } from \"formik\";\nimport FormFields from \"../components/FormFields\";\nimport * as Yup from \"yup\";\nimport { gql, useMutation } from \"@apollo/client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CREATE_TASK = gql`\n  mutation CreateTask(\n    $name: String!\n    $description: String!\n    $date: String!\n    $urgent: Boolean!\n  ) {\n    addTask(\n      name: $name\n      description: $description\n      date: $date\n      urgent: $urgent\n    ) {\n      success\n      message\n    }\n  }\n`;\n\nconst NewTask = ({\n  refetchTasks,\n  user\n}) => {\n  _s();\n\n  const [createTask, {\n    data\n  }] = useMutation(CREATE_TASK, {\n    onCompleted: () => refetchTasks()\n  });\n  const listid = \"assignees\";\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-origin-padding w-min rounded-lg bg-gray-300 bg-opacity-90 shadow-2xl mt-10 ml-10 p-4\",\n    children: [/*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: {\n        name: \"\",\n        description: \"\",\n        date: \"\",\n        urgent: false,\n        assignees: [{\n          email: \"\"\n        }]\n      },\n      validationSchema: Yup.object({\n        name: Yup.string().required(\"Required\"),\n        description: Yup.string().required(\"Required\"),\n        date: Yup.date(),\n        urgent: Yup.bool()\n      }),\n      onSubmit: (values, {\n        setSubmitting\n      }) => {\n        setTimeout(() => {\n          createTask({\n            variables: {\n              name: values.name,\n              description: values.description,\n              date: new Date(values.date).toISOString(),\n              urgent: values.urgent\n            }\n          });\n          setSubmitting(false);\n        }, 400);\n      },\n      className: \"flex items-center justify-center\",\n      children: ({\n        values\n      }) => /*#__PURE__*/_jsxDEV(Form, {\n        children: [/*#__PURE__*/_jsxDEV(FormFields, {\n          label: \"Title\",\n          name: \"name\",\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(FormFields, {\n          label: \"Description\",\n          name: \"description\",\n          type: \"textarea\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(FormFields, {\n          label: \"Date\",\n          name: \"date\",\n          type: \"datetime-local\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(FormFields, {\n          label: \"Urgent\",\n          name: \"urgent\",\n          type: \"checkbox\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(FieldArray, {\n          name: \"assignees\",\n          children: ({\n            remove,\n            push\n          }) => /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [values.assignees.length > 0 && values.assignees.map((assignee, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"flex items-center\",\n              children: [/*#__PURE__*/_jsxDEV(FormFields, {\n                name: `assignees.${index}.name`,\n                list: listid,\n                label: \"Assignee\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 76,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => remove(index),\n                className: \"mt-2 ml-1 rounded w-4 bg-yellow-200 hover:bg-yellow-500\",\n                children: \"X\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 77,\n                columnNumber: 21\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 21\n            }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => push({\n                email: \"\"\n              }),\n              className: \"rounded w-full bg-green-200 hover:bg-green-500\",\n              children: \"Add\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"rounded w-full bg-green-200 hover:bg-green-500\",\n          children: \"Create\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), data ? data.addTask.message : null, /*#__PURE__*/_jsxDEV(\"datalist\", {\n      id: listid,\n      children: user.connections.map(connection => {\n        return /*#__PURE__*/_jsxDEV(\"option\", {\n          value: connection.email,\n          children: connection.name\n        }, connection.email, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n\n_s(NewTask, \"5GQzrZx/BrBEsbTd1xxu1OEt2+o=\", false, function () {\n  return [useMutation];\n});\n\n_c = NewTask;\nexport default NewTask;\n\nvar _c;\n\n$RefreshReg$(_c, \"NewTask\");","map":{"version":3,"sources":["/home/gaby/Projects/tasks-app/client/src/views/AddTask.js"],"names":["Formik","Form","FieldArray","FormFields","Yup","gql","useMutation","CREATE_TASK","NewTask","refetchTasks","user","createTask","data","onCompleted","listid","name","description","date","urgent","assignees","email","object","string","required","bool","values","setSubmitting","setTimeout","variables","Date","toISOString","remove","push","length","map","assignee","index","addTask","message","connections","connection"],"mappings":"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","sourcesContent":["import { Formik, Form, FieldArray } from \"formik\";\nimport FormFields from \"../components/FormFields\";\nimport * as Yup from \"yup\";\nimport { gql, useMutation } from \"@apollo/client\";\n\nconst CREATE_TASK = gql`\n  mutation CreateTask(\n    $name: String!\n    $description: String!\n    $date: String!\n    $urgent: Boolean!\n  ) {\n    addTask(\n      name: $name\n      description: $description\n      date: $date\n      urgent: $urgent\n    ) {\n      success\n      message\n    }\n  }\n`;\n\nconst NewTask = ({ refetchTasks, user }) => {\n  const [createTask, { data }] = useMutation(CREATE_TASK, {\n    onCompleted: () => refetchTasks(),\n  });\n  const listid = \"assignees\";\n  return (\n    <div className=\"bg-origin-padding w-min rounded-lg bg-gray-300 bg-opacity-90 shadow-2xl mt-10 ml-10 p-4\">\n      <Formik\n        initialValues={{\n          name: \"\",\n          description: \"\",\n          date: \"\",\n          urgent: false,\n          assignees: [{ email: \"\" }],\n        }}\n        validationSchema={Yup.object({\n          name: Yup.string().required(\"Required\"),\n          description: Yup.string().required(\"Required\"),\n          date: Yup.date(),\n          urgent: Yup.bool(),\n        })}\n        onSubmit={(values, { setSubmitting }) => {\n          setTimeout(() => {\n            createTask({\n              variables: {\n                name: values.name,\n                description: values.description,\n                date: new Date(values.date).toISOString(),\n                urgent: values.urgent,\n              },\n            });\n            setSubmitting(false);\n          }, 400);\n        }}\n        className=\"flex items-center justify-center\"\n      >\n        {({ values }) => (\n          <Form>\n            <FormFields label=\"Title\" name=\"name\" type=\"text\" />\n            <FormFields\n              label=\"Description\"\n              name=\"description\"\n              type=\"textarea\"\n            />\n            <FormFields label=\"Date\" name=\"date\" type=\"datetime-local\" />\n            <FormFields label=\"Urgent\" name=\"urgent\" type=\"checkbox\" />\n            <FieldArray name=\"assignees\">\n              {({remove, push}) => (\n                <div>\n                  {values.assignees.length > 0 && values.assignees.map((assignee, index) => (\n                    <div key={index} className=\"flex items-center\">\n                    <FormFields name={`assignees.${index}.name`} list={listid} label=\"Assignee\" />\n                    <button onClick={() => remove(index)} className=\"mt-2 ml-1 rounded w-4 bg-yellow-200 hover:bg-yellow-500\" >X</button>\n                    </div>\n                  ))}\n                  <button onClick={() => push({email: \"\"})} className=\"rounded w-full bg-green-200 hover:bg-green-500\">Add</button>\n                </div>\n              )}\n            </FieldArray>\n\n            <button\n              type=\"submit\"\n              className=\"rounded w-full bg-green-200 hover:bg-green-500\"\n            >\n              Create\n            </button>\n          </Form>\n        )}\n      </Formik>\n      {data ? data.addTask.message : null}\n      <datalist id={listid}>\n        {user.connections.map((connection) => {\n          return (\n            <option value={connection.email} key={connection.email}>\n              {connection.name}\n            </option>\n          );\n        })}\n      </datalist>\n    </div>\n  );\n};\n\nexport default NewTask;\n"]},"metadata":{},"sourceType":"module"}