{"ast":null,"code":"var _jsxFileName = \"/home/gaby/Projects/tasks/src/components/CalendarView.js\";\nimport DayView from \"./DayView\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Calendar = ({\n  date\n}) => {\n  const year = date.getFullYear();\n  const month = date.getMonth();\n  const firstDay = new Date(year, month);\n\n  const fillDays = days => {\n    let topArray = [];\n    let middleArray = [];\n    let bottomArray = [];\n\n    for (let day = daysInMonth[month - 1]; day < daysInMonth[month - 1] - firstDay.getDay(); day--) {\n      topArray.push(day);\n    }\n\n    for (let day = 1; day < days; day++) {\n      middleArray.push(day);\n    }\n\n    for (let day = daysInMonth[month + 1] - firstDay.getDay(); day < daysInMonth[month + 1]; day++) {\n      bottomArray.push(day);\n    }\n\n    let dayArray = topArray + middleArray + bottomArray;\n    return dayArray;\n  };\n\n  const daysInMonth = [31, new Date(year, 1, 29).getMonth() === 1 ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const dateData = {\n    months: {\n      january: {\n        days: fillDays(daysInMonth.january)\n      },\n      febuary: {\n        days: fillDays(daysInMonth.febuary)\n      },\n      march: {\n        days: fillDays(daysInMonth.march)\n      },\n      april: {\n        days: fillDays(daysInMonth.april)\n      },\n      may: {\n        days: fillDays(daysInMonth.may)\n      },\n      june: {\n        days: fillDays(daysInMonth.june)\n      },\n      july: {\n        days: fillDays(daysInMonth.july)\n      },\n      august: {\n        days: fillDays(daysInMonth.august)\n      },\n      september: {\n        days: fillDays(daysInMonth.september)\n      },\n      october: {\n        days: fillDays(daysInMonth.october)\n      },\n      november: {\n        days: fillDays(daysInMonth.november)\n      },\n      december: {\n        days: fillDays(daysInMonth.december)\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"grid grid-cols-7 grid-rows-5\",\n    children: dateData.months[month].days.map(day => {\n      return /*#__PURE__*/_jsxDEV(DayView, {\n        day: day\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 16\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n};\n\n_c = Calendar;\nexport default Calendar;\n/*\ndate.months[month].weeks.map((week) => {\n        return (\n          <tr key={week}>\n            {date.months[month].days\n              .slice(week * 7, week * 7 + 7)\n              .map((day) => {\n                return (\n                  <td key={day}>\n                    <DayCell day={day} />\n                  </td>\n                );\n              })}\n*/\n\n/* const fillMonthWeeks = (days) => {\n  let weekArray = [];\n  for (let week = 0; week < Math.ceil(days / 7); week++) {\n    weekArray.push(week);\n  }\n  return weekArray;\n}; */\n\nvar _c;\n\n$RefreshReg$(_c, \"Calendar\");","map":{"version":3,"sources":["/home/gaby/Projects/tasks/src/components/CalendarView.js"],"names":["DayView","Calendar","date","year","getFullYear","month","getMonth","firstDay","Date","fillDays","days","topArray","middleArray","bottomArray","day","daysInMonth","getDay","push","dayArray","dateData","months","january","febuary","march","april","may","june","july","august","september","october","november","december","map"],"mappings":"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","sourcesContent":["import DayView from \"./DayView\";\n\nconst Calendar = ({ date }) => {\n  const year = date.getFullYear();\n  const month = date.getMonth();\n  const firstDay = new Date(year, month);\n  const fillDays = (days) => {\n    let topArray = [];\n    let middleArray = [];\n    let bottomArray = [];\n    for (\n      let day = daysInMonth[month - 1];\n      day < daysInMonth[month - 1] - firstDay.getDay();\n      day--\n    ) {\n      topArray.push(day);\n    }\n    for (let day = 1; day < days; day++) {\n      middleArray.push(day);\n    }\n    for (\n      let day = daysInMonth[month + 1] - firstDay.getDay();\n      day < daysInMonth[month + 1];\n      day++\n    ) {\n      bottomArray.push(day);\n    }\n    let dayArray = topArray + middleArray + bottomArray;\n    return dayArray;\n  };\n\n  const daysInMonth = [\n    31,\n    new Date(year, 1, 29).getMonth() === 1 ? 29 : 28,\n    31,\n    30,\n    31,\n    30,\n    31,\n    31,\n    30,\n    31,\n    30,\n    31,\n  ];\n  const dateData = {\n    months: {\n      january: {\n        days: fillDays(daysInMonth.january),\n      },\n      febuary: {\n        days: fillDays(daysInMonth.febuary),\n      },\n      march: {\n        days: fillDays(daysInMonth.march),\n      },\n      april: {\n        days: fillDays(daysInMonth.april),\n      },\n      may: {\n        days: fillDays(daysInMonth.may),\n      },\n      june: {\n        days: fillDays(daysInMonth.june),\n      },\n      july: {\n        days: fillDays(daysInMonth.july),\n      },\n      august: {\n        days: fillDays(daysInMonth.august),\n      },\n      september: {\n        days: fillDays(daysInMonth.september),\n      },\n      october: {\n        days: fillDays(daysInMonth.october),\n      },\n      november: {\n        days: fillDays(daysInMonth.november),\n      },\n      december: {\n        days: fillDays(daysInMonth.december),\n      },\n    },\n  };\n\n  return (\n    <div className=\"grid grid-cols-7 grid-rows-5\">\n      {dateData.months[month].days.map((day) => {\n        return <DayView day={day} />;\n      })}\n    </div>\n  );\n};\n\nexport default Calendar;\n\n/*\ndate.months[month].weeks.map((week) => {\n        return (\n          <tr key={week}>\n            {date.months[month].days\n              .slice(week * 7, week * 7 + 7)\n              .map((day) => {\n                return (\n                  <td key={day}>\n                    <DayCell day={day} />\n                  </td>\n                );\n              })}\n*/\n/* const fillMonthWeeks = (days) => {\n  let weekArray = [];\n  for (let week = 0; week < Math.ceil(days / 7); week++) {\n    weekArray.push(week);\n  }\n  return weekArray;\n}; */\n"]},"metadata":{},"sourceType":"module"}