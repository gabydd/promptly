{"ast":null,"code":"import DayView from\"./DayView\";import{jsx as _jsx}from\"react/jsx-runtime\";var Calendar=function Calendar(_ref){var date=_ref.date;var year=date.getFullYear();var month=date.getMonth();var daysInMonth=[31,new Date(year,1,29).getMonth()===1?29:28,31,30,31,30,31,31,30,31,30,31];var firstDay=new Date(year,month,1).getDay();var lastDay=new Date(year,month,daysInMonth[month]).getDay();var fillDays=function fillDays(month){var topArray=[];var middleArray=[];var bottomArray=[];for(var day=daysInMonth[month-1]-firstDay+2;day<daysInMonth[month-1]+1;day++){topArray.push(day);}for(var _day=1;_day<daysInMonth[month]+1;_day++){middleArray.push(_day);}for(var _day2=1;_day2<7-lastDay+1;_day2++){bottomArray.push(_day2);}var dayArray=[].concat(topArray,middleArray,bottomArray);return dayArray;};return/*#__PURE__*/_jsx(\"div\",{className:\"grid grid-cols-7 grid-rows-5\",children:fillDays(month).map(function(day,index){return/*#__PURE__*/_jsx(DayView,{day:day},index);})});};export default Calendar;/*\ndate.months[month].weeks.map((week) => {\n        return (\n          <tr key={week}>\n            {date.months[month].days\n              .slice(week * 7, week * 7 + 7)\n              .map((day) => {\n                return (\n                  <td key={day}>\n                    <DayCell day={day} />\n                  </td>\n                );\n              })}\n*/ /* const fillMonthWeeks = (days) => {\n  let weekArray = [];\n  for (let week = 0; week < Math.ceil(days / 7); week++) {\n    weekArray.push(week);\n  }\n  return weekArray;\n}; */","map":{"version":3,"sources":["/home/gaby/Projects/tasks-app/client/src/views/CalendarView.js"],"names":["DayView","Calendar","date","year","getFullYear","month","getMonth","daysInMonth","Date","firstDay","getDay","lastDay","fillDays","topArray","middleArray","bottomArray","day","push","dayArray","map","index"],"mappings":"AAAA,MAAOA,CAAAA,OAAP,KAAoB,WAApB,C,2CAEA,GAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,MAAc,IAAXC,CAAAA,IAAW,MAAXA,IAAW,CAC7B,GAAMC,CAAAA,IAAI,CAAGD,IAAI,CAACE,WAAL,EAAb,CACA,GAAMC,CAAAA,KAAK,CAAGH,IAAI,CAACI,QAAL,EAAd,CACA,GAAMC,CAAAA,WAAW,CAAG,CAClB,EADkB,CAElB,GAAIC,CAAAA,IAAJ,CAASL,IAAT,CAAe,CAAf,CAAkB,EAAlB,EAAsBG,QAAtB,KAAqC,CAArC,CAAyC,EAAzC,CAA8C,EAF5B,CAGlB,EAHkB,CAIlB,EAJkB,CAKlB,EALkB,CAMlB,EANkB,CAOlB,EAPkB,CAQlB,EARkB,CASlB,EATkB,CAUlB,EAVkB,CAWlB,EAXkB,CAYlB,EAZkB,CAApB,CAcA,GAAMG,CAAAA,QAAQ,CAAG,GAAID,CAAAA,IAAJ,CAASL,IAAT,CAAeE,KAAf,CAAsB,CAAtB,EAAyBK,MAAzB,EAAjB,CACA,GAAMC,CAAAA,OAAO,CAAG,GAAIH,CAAAA,IAAJ,CAASL,IAAT,CAAeE,KAAf,CAAsBE,WAAW,CAACF,KAAD,CAAjC,EAA0CK,MAA1C,EAAhB,CACA,GAAME,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAACP,KAAD,CAAW,CAC1B,GAAIQ,CAAAA,QAAQ,CAAG,EAAf,CACA,GAAIC,CAAAA,WAAW,CAAG,EAAlB,CACA,GAAIC,CAAAA,WAAW,CAAG,EAAlB,CACA,IACE,GAAIC,CAAAA,GAAG,CAAGT,WAAW,CAACF,KAAK,CAAG,CAAT,CAAX,CAAyBI,QAAzB,CAAmC,CAD/C,CAEEO,GAAG,CAAGT,WAAW,CAACF,KAAK,CAAG,CAAT,CAAX,CAAwB,CAFhC,CAGEW,GAAG,EAHL,CAIE,CACAH,QAAQ,CAACI,IAAT,CAAcD,GAAd,EACD,CACD,IAAK,GAAIA,CAAAA,IAAG,CAAG,CAAf,CAAkBA,IAAG,CAAGT,WAAW,CAACF,KAAD,CAAX,CAAqB,CAA7C,CAAgDW,IAAG,EAAnD,CAAuD,CACrDF,WAAW,CAACG,IAAZ,CAAiBD,IAAjB,EACD,CACD,IAAK,GAAIA,CAAAA,KAAG,CAAG,CAAf,CAAkBA,KAAG,CAAG,EAAIL,OAAJ,CAAc,CAAtC,CAAyCK,KAAG,EAA5C,CAAgD,CAC9CD,WAAW,CAACE,IAAZ,CAAiBD,KAAjB,EACD,CACD,GAAIE,CAAAA,QAAQ,WAAOL,QAAP,CAAoBC,WAApB,CAAoCC,WAApC,CAAZ,CACA,MAAOG,CAAAA,QAAP,CACD,CAnBD,CAqBA,mBACE,YAAK,SAAS,CAAC,8BAAf,UACGN,QAAQ,CAACP,KAAD,CAAR,CAAgBc,GAAhB,CAAoB,SAACH,GAAD,CAAMI,KAAN,CAAgB,CACnC,mBAAO,KAAC,OAAD,EAAqB,GAAG,CAAEJ,GAA1B,EAAcI,KAAd,CAAP,CACD,CAFA,CADH,EADF,CAOD,CA/CD,CAiDA,cAAenB,CAAAA,QAAf,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,E,CACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import DayView from \"./DayView\";\n\nconst Calendar = ({ date }) => {\n  const year = date.getFullYear();\n  const month = date.getMonth();\n  const daysInMonth = [\n    31,\n    new Date(year, 1, 29).getMonth() === 1 ? 29 : 28,\n    31,\n    30,\n    31,\n    30,\n    31,\n    31,\n    30,\n    31,\n    30,\n    31,\n  ];\n  const firstDay = new Date(year, month, 1).getDay();\n  const lastDay = new Date(year, month, daysInMonth[month]).getDay();\n  const fillDays = (month) => {\n    let topArray = [];\n    let middleArray = [];\n    let bottomArray = [];\n    for (\n      let day = daysInMonth[month - 1] - firstDay +2;\n      day < daysInMonth[month - 1] +1;\n      day++\n    ) {\n      topArray.push(day);\n    }\n    for (let day = 1; day < daysInMonth[month] + 1; day++) {\n      middleArray.push(day);\n    }\n    for (let day = 1; day < 7 - lastDay + 1; day++) {\n      bottomArray.push(day);\n    }\n    let dayArray = [...topArray, ...middleArray, ...bottomArray];\n    return dayArray;\n  };\n\n  return (\n    <div className=\"grid grid-cols-7 grid-rows-5\">\n      {fillDays(month).map((day, index) => {\n        return <DayView key={index} day={day} />;\n      })}\n    </div>\n  );\n};\n\nexport default Calendar;\n\n/*\ndate.months[month].weeks.map((week) => {\n        return (\n          <tr key={week}>\n            {date.months[month].days\n              .slice(week * 7, week * 7 + 7)\n              .map((day) => {\n                return (\n                  <td key={day}>\n                    <DayCell day={day} />\n                  </td>\n                );\n              })}\n*/\n/* const fillMonthWeeks = (days) => {\n  let weekArray = [];\n  for (let week = 0; week < Math.ceil(days / 7); week++) {\n    weekArray.push(week);\n  }\n  return weekArray;\n}; */\n"]},"metadata":{},"sourceType":"module"}