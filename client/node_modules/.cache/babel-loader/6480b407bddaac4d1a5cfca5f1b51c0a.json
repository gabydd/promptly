{"ast":null,"code":"import _slicedToArray from\"/home/gaby/Projects/tasks-app/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _taggedTemplateLiteral from\"/home/gaby/Projects/tasks-app/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";var _templateObject;import{Form,Formik}from\"formik\";import FormFields from\"../components/FormFields\";import*as Yup from'yup';import{gql,useMutation}from\"@apollo/client\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var CONNECT=gql(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n    mutation AddConnection($email: String!) {\\n        addConnection(email: $email) {\\n            message\\n            success\\n        }\\n    }\\n\"])));export var ConnectionsView=function ConnectionsView(_ref){var refetchUser=_ref.refetchUser,user=_ref.user;var _useMutation=useMutation(CONNECT,{onCompleted:function onCompleted(){return refetchUser();}}),_useMutation2=_slicedToArray(_useMutation,2),addConnection=_useMutation2[0],data=_useMutation2[1].data;return/*#__PURE__*/_jsxs(\"div\",{className:\"bg-origin-padding rounded-lg bg-gray-300 bg-opacity-90 shadow-2xl mt-10 ml-10 p-4\",children:[/*#__PURE__*/_jsx(Formik,{initialValues:{email:\"\"},validationSchema:Yup.object({email:Yup.string().email(\"Invalid email address\").required(\"Required\")}),onSubmit:function onSubmit(values,_ref2){var setSubmitting=_ref2.setSubmitting;setTimeout(function(){addConnection({variables:{email:values.email}});setSubmitting(false);},400);},className:\"flex items-center justify-center\",children:/*#__PURE__*/_jsxs(Form,{children:[/*#__PURE__*/_jsx(FormFields,{label:\"User's Email\",name:\"email\",type:\"email\"}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",className:\"rounded w-full bg-green-200 hover:bg-green-500\",children:\"Connect\"}),/*#__PURE__*/_jsx(\"div\",{className:\"text-red-600 text-sm mt-2\",children:data?data.addConnection.message:undefined})]})}),/*#__PURE__*/_jsx(\"div\",{className:\"font-bold\",children:\"Connections\"}),user.connections.map(function(connection){return/*#__PURE__*/_jsxs(\"div\",{className:\"text-yellow-700\",children:[connection.name,\": \",connection.email]},connection.name);}),/*#__PURE__*/_jsx(\"div\",{className:\"font-bold\",children:\"Connects To You\"}),user.connectsToUser.map(function(connection){return/*#__PURE__*/_jsxs(\"div\",{className:\"text-yellow-700\",children:[connection.name,\": \",connection.email]},connection.name);})]});};","map":{"version":3,"sources":["/home/gaby/Projects/tasks-app/client/src/views/ConnectionsView.js"],"names":["Form","Formik","FormFields","Yup","gql","useMutation","CONNECT","ConnectionsView","refetchUser","user","onCompleted","addConnection","data","email","object","string","required","values","setSubmitting","setTimeout","variables","message","undefined","connections","map","connection","name","connectsToUser"],"mappings":"0VAAA,OAASA,IAAT,CAAeC,MAAf,KAA6B,QAA7B,CACA,MAAOC,CAAAA,UAAP,KAAuB,0BAAvB,CACA,MAAO,GAAKC,CAAAA,GAAZ,KAAqB,KAArB,CACA,OAASC,GAAT,CAAcC,WAAd,KAAiC,gBAAjC,C,wFAEA,GAAMC,CAAAA,OAAO,CAAGF,GAAH,sNAAb,CASA,MAAO,IAAMG,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,MAAyB,IAAvBC,CAAAA,WAAuB,MAAvBA,WAAuB,CAAVC,IAAU,MAAVA,IAAU,kBACtBJ,WAAW,CAACC,OAAD,CAAU,CAACI,WAAW,CAAE,6BAAMF,CAAAA,WAAW,EAAjB,EAAd,CAAV,CADW,8CAC/CG,aAD+C,kBAC/BC,IAD+B,kBAC/BA,IAD+B,CAEtD,mBACE,aAAK,SAAS,CAAC,mFAAf,wBACE,KAAC,MAAD,EACE,aAAa,CAAE,CAAEC,KAAK,CAAE,EAAT,CADjB,CAEE,gBAAgB,CAAEV,GAAG,CAACW,MAAJ,CAAW,CAC3BD,KAAK,CAAEV,GAAG,CAACY,MAAJ,GACJF,KADI,CACE,uBADF,EAEJG,QAFI,CAEK,UAFL,CADoB,CAAX,CAFpB,CAOE,QAAQ,CAAE,kBAACC,MAAD,OAA+B,IAApBC,CAAAA,aAAoB,OAApBA,aAAoB,CACvCC,UAAU,CAAC,UAAM,CACbR,aAAa,CAAC,CAACS,SAAS,CAAE,CAACP,KAAK,CAAEI,MAAM,CAACJ,KAAf,CAAZ,CAAD,CAAb,CACFK,aAAa,CAAC,KAAD,CAAb,CACD,CAHS,CAGP,GAHO,CAAV,CAID,CAZH,CAaE,SAAS,CAAC,kCAbZ,uBAeE,MAAC,IAAD,yBACE,KAAC,UAAD,EAAY,KAAK,CAAC,cAAlB,CAAiC,IAAI,CAAC,OAAtC,CAA8C,IAAI,CAAC,OAAnD,EADF,cAEE,eAAQ,IAAI,CAAC,QAAb,CAAsB,SAAS,CAAC,gDAAhC,qBAFF,cAGE,YAAK,SAAS,CAAC,2BAAf,UAA4CN,IAAI,CAAGA,IAAI,CAACD,aAAL,CAAmBU,OAAtB,CAAgCC,SAAhF,EAHF,GAfF,EADF,cAsBE,YAAK,SAAS,CAAC,WAAf,yBAtBF,CAuBGb,IAAI,CAACc,WAAL,CAAiBC,GAAjB,CAAqB,SAACC,UAAD,CAAgB,CAClC,mBAAO,aAA2B,SAAS,CAAC,iBAArC,WAAwDA,UAAU,CAACC,IAAnE,MAA2ED,UAAU,CAACZ,KAAtF,GAAUY,UAAU,CAACC,IAArB,CAAP,CACH,CAFA,CAvBH,cA0BE,YAAK,SAAS,CAAC,WAAf,6BA1BF,CA2BGjB,IAAI,CAACkB,cAAL,CAAoBH,GAApB,CAAwB,SAACC,UAAD,CAAgB,CACrC,mBAAO,aAA2B,SAAS,CAAC,iBAArC,WAAwDA,UAAU,CAACC,IAAnE,MAA2ED,UAAU,CAACZ,KAAtF,GAAUY,UAAU,CAACC,IAArB,CAAP,CACH,CAFA,CA3BH,GADF,CAkCD,CApCM","sourcesContent":["import { Form, Formik } from \"formik\";\nimport FormFields from \"../components/FormFields\";\nimport * as Yup from 'yup'\nimport { gql, useMutation } from \"@apollo/client\";\n\nconst CONNECT = gql`\n    mutation AddConnection($email: String!) {\n        addConnection(email: $email) {\n            message\n            success\n        }\n    }\n`\n\nexport const ConnectionsView = ({refetchUser, user}) => {\n  const [addConnection, {data}] = useMutation(CONNECT, {onCompleted: () => refetchUser()})\n  return (\n    <div className=\"bg-origin-padding rounded-lg bg-gray-300 bg-opacity-90 shadow-2xl mt-10 ml-10 p-4\" >\n      <Formik\n        initialValues={{ email: \"\" }}\n        validationSchema={Yup.object({\n          email: Yup.string()\n            .email(\"Invalid email address\")\n            .required(\"Required\")\n        })}\n        onSubmit={(values, { setSubmitting }) => {\n          setTimeout(() => {\n              addConnection({variables: {email: values.email}})\n            setSubmitting(false);\n          }, 400);\n        }}\n        className=\"flex items-center justify-center\"\n      >\n        <Form>\n          <FormFields label=\"User's Email\" name=\"email\" type=\"email\" />\n          <button type=\"submit\" className=\"rounded w-full bg-green-200 hover:bg-green-500\">Connect</button>\n          <div className=\"text-red-600 text-sm mt-2\">{data ? data.addConnection.message : undefined}</div>\n        </Form>\n      </Formik>\n      <div className=\"font-bold\">Connections</div>\n      {user.connections.map((connection) => {\n          return <div key={connection.name} className=\"text-yellow-700\">{connection.name}: {connection.email}</div>\n      } )}\n      <div className=\"font-bold\">Connects To You</div>\n      {user.connectsToUser.map((connection) => {\n          return <div key={connection.name} className=\"text-yellow-700\">{connection.name}: {connection.email}</div>\n      } )}\n\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}