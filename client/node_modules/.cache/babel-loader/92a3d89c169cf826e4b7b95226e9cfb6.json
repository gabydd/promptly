{"ast":null,"code":"var _jsxFileName = \"/home/gaby/Projects/tasks/src/components/CalendarView.js\";\nimport DayView from \"./DayView\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Calendar = ({\n  date,\n  testMonth\n}) => {\n  const year = date.getFullYear();\n  const month = date.getMonth();\n  const firstDay = new Date(year, month);\n\n  const fillDays = days => {\n    let topArray = [];\n    let middleArray = [];\n    let bottomArray = [];\n\n    for (let day = daysInMonth[month - 1]; day < daysInMonth[month - 1] - firstDay.getDay(); day--) {\n      topArray.push(day);\n    }\n\n    for (let day = 1; day < days; day++) {\n      middleArray.push(day);\n    }\n\n    for (let day = daysInMonth[month + 1] - firstDay.getDay(); day < daysInMonth[month + 1]; day++) {\n      bottomArray.push(day);\n    }\n\n    let dayArray = topArray + middleArray + bottomArray;\n    return dayArray;\n  };\n\n  const fillMonthWeeks = days => {\n    let weekArray = [];\n\n    for (let week = 0; week < Math.ceil(days / 7); week++) {\n      weekArray.push(week);\n    }\n\n    return weekArray;\n  };\n\n  const daysInMonth = [31, new Date(year, 1, 29).getMonth() === 1 ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const dateData = {\n    months: {\n      january: {\n        days: fillDays(daysInMonth.january),\n        weeks: fillMonthWeeks(daysInMonth.january)\n      },\n      febuary: {\n        days: fillDays(daysInMonth.febuary),\n        weeks: fillMonthWeeks(daysInMonth.febuary)\n      },\n      march: {\n        days: fillDays(daysInMonth.march),\n        weeks: fillMonthWeeks(daysInMonth.march)\n      },\n      april: {\n        days: fillDays(daysInMonth.april),\n        weeks: fillMonthWeeks(daysInMonth.april)\n      },\n      may: {\n        days: fillDays(daysInMonth.may),\n        weeks: fillMonthWeeks(daysInMonth.may)\n      },\n      june: {\n        days: fillDays(daysInMonth.june),\n        weeks: fillMonthWeeks(daysInMonth.june)\n      },\n      july: {\n        days: fillDays(daysInMonth.july),\n        weeks: fillMonthWeeks(daysInMonth.july)\n      },\n      august: {\n        days: fillDays(daysInMonth.august),\n        weeks: fillMonthWeeks(daysInMonth.august)\n      },\n      september: {\n        days: fillDays(daysInMonth.september),\n        weeks: fillMonthWeeks(daysInMonth.september)\n      },\n      october: {\n        days: fillDays(daysInMonth.october),\n        weeks: fillMonthWeeks(daysInMonth.october)\n      },\n      november: {\n        days: fillDays(daysInMonth.november),\n        weeks: fillMonthWeeks(daysInMonth.november)\n      },\n      december: {\n        days: fillDays(daysInMonth.december),\n        weeks: fillMonthWeeks(daysInMonth.december)\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"grid grid-cols-7 grid-rows-5\",\n    children: dateData.months[month].days.map(day => {\n      return /*#__PURE__*/_jsxDEV(DayView, {\n        day: day\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 16\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 5\n  }, this);\n};\n\n_c = Calendar;\nexport default Calendar;\n/*\ndate.months[month].weeks.map((week) => {\n        return (\n          <tr key={week}>\n            {date.months[month].days\n              .slice(week * 7, week * 7 + 7)\n              .map((day) => {\n                return (\n                  <td key={day}>\n                    <DayCell day={day} />\n                  </td>\n                );\n              })}\n*/\n\nvar _c;\n\n$RefreshReg$(_c, \"Calendar\");","map":{"version":3,"sources":["/home/gaby/Projects/tasks/src/components/CalendarView.js"],"names":["DayView","Calendar","date","testMonth","year","getFullYear","month","getMonth","firstDay","Date","fillDays","days","topArray","middleArray","bottomArray","day","daysInMonth","getDay","push","dayArray","fillMonthWeeks","weekArray","week","Math","ceil","dateData","months","january","weeks","febuary","march","april","may","june","july","august","september","october","november","december","map"],"mappings":"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","sourcesContent":["import DayView from \"./DayView\";\n\nconst Calendar = ({ date, testMonth }) => {\n  const year = date.getFullYear();\n  const month = date.getMonth();\n  const firstDay = new Date(year, month);\n  const fillDays = (days) => {\n    let topArray = [];\n    let middleArray = [];\n    let bottomArray = [];\n    for (\n      let day = daysInMonth[month - 1];\n      day < daysInMonth[month - 1] - firstDay.getDay();\n      day--\n    ) {\n      topArray.push(day)\n    }\n    for (let day = 1; day < days; day++) {\n      middleArray.push(day);\n    }\n    for (\n      let day = daysInMonth[month + 1] - firstDay.getDay();\n      day < daysInMonth[month + 1];\n      day++\n    ) {\n      bottomArray.push(day)\n    }\n    let dayArray = topArray + middleArray + bottomArray;\n    return dayArray;\n  };\n  const fillMonthWeeks = (days) => {\n    let weekArray = [];\n    for (let week = 0; week < Math.ceil(days / 7); week++) {\n      weekArray.push(week);\n    }\n    return weekArray;\n  };\n  const daysInMonth = [\n    31,\n    new Date(year, 1, 29).getMonth() === 1 ? 29 : 28,\n    31,\n    30,\n    31,\n    30,\n    31,\n    31,\n    30,\n    31,\n    30,\n    31,\n  ];\n  const dateData = {\n    months: {\n      january: {\n        days: fillDays(daysInMonth.january),\n        weeks: fillMonthWeeks(daysInMonth.january),\n      },\n      febuary: {\n        days: fillDays(daysInMonth.febuary),\n        weeks: fillMonthWeeks(daysInMonth.febuary),\n      },\n      march: {\n        days: fillDays(daysInMonth.march),\n        weeks: fillMonthWeeks(daysInMonth.march),\n      },\n      april: {\n        days: fillDays(daysInMonth.april),\n        weeks: fillMonthWeeks(daysInMonth.april),\n      },\n      may: {\n        days: fillDays(daysInMonth.may),\n        weeks: fillMonthWeeks(daysInMonth.may),\n      },\n      june: {\n        days: fillDays(daysInMonth.june),\n        weeks: fillMonthWeeks(daysInMonth.june),\n      },\n      july: {\n        days: fillDays(daysInMonth.july),\n        weeks: fillMonthWeeks(daysInMonth.july),\n      },\n      august: {\n        days: fillDays(daysInMonth.august),\n        weeks: fillMonthWeeks(daysInMonth.august),\n      },\n      september: {\n        days: fillDays(daysInMonth.september),\n        weeks: fillMonthWeeks(daysInMonth.september),\n      },\n      october: {\n        days: fillDays(daysInMonth.october),\n        weeks: fillMonthWeeks(daysInMonth.october),\n      },\n      november: {\n        days: fillDays(daysInMonth.november),\n        weeks: fillMonthWeeks(daysInMonth.november),\n      },\n      december: {\n        days: fillDays(daysInMonth.december),\n        weeks: fillMonthWeeks(daysInMonth.december),\n      },\n    },\n  };\n\n  return (\n    <div className=\"grid grid-cols-7 grid-rows-5\">\n      {dateData.months[month].days.map((day) => {\n        return <DayView day={day} />;\n      })}\n    </div>\n  );\n};\n\nexport default Calendar;\n\n/*\ndate.months[month].weeks.map((week) => {\n        return (\n          <tr key={week}>\n            {date.months[month].days\n              .slice(week * 7, week * 7 + 7)\n              .map((day) => {\n                return (\n                  <td key={day}>\n                    <DayCell day={day} />\n                  </td>\n                );\n              })}\n*/\n"]},"metadata":{},"sourceType":"module"}